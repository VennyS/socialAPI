// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"
	chat "socialAPI/internal/api/chat"

	mock "github.com/stretchr/testify/mock"

	repository "socialAPI/internal/storage/repository"

	shared "socialAPI/internal/shared"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *ChatService) Create(req chat.CreateRequest) *shared.HttpError {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *shared.HttpError
	if rf, ok := ret.Get(0).(func(chat.CreateRequest) *shared.HttpError); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HttpError)
		}
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *ChatService) GetAll() (*[]repository.ChatDTO, *shared.HttpError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]repository.ChatDTO
	var r1 *shared.HttpError
	if rf, ok := ret.Get(0).(func() (*[]repository.ChatDTO, *shared.HttpError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]repository.ChatDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]repository.ChatDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() *shared.HttpError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shared.HttpError)
		}
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: chatID
func (_m *ChatService) GetOne(chatID uint) (*repository.ChatDTO, *shared.HttpError) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *repository.ChatDTO
	var r1 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint) (*repository.ChatDTO, *shared.HttpError)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(uint) *repository.ChatDTO); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.ChatDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) *shared.HttpError); ok {
		r1 = rf(chatID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shared.HttpError)
		}
	}

	return r0, r1
}

// HandleWebSocket provides a mock function with given fields: userID, w, r
func (_m *ChatService) HandleWebSocket(userID uint, w http.ResponseWriter, r *http.Request) *shared.HttpError {
	ret := _m.Called(userID, w, r)

	if len(ret) == 0 {
		panic("no return value specified for HandleWebSocket")
	}

	var r0 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint, http.ResponseWriter, *http.Request) *shared.HttpError); ok {
		r0 = rf(userID, w, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HttpError)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, req
func (_m *ChatService) Update(id uint, req chat.CreateRequest) *shared.HttpError {
	ret := _m.Called(id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint, chat.CreateRequest) *shared.HttpError); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HttpError)
		}
	}

	return r0
}

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
