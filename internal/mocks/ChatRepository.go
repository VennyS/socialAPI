// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, userIDs
func (_m *ChatRepository) Create(name *string, userIDs []uint) error {
	ret := _m.Called(name, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, []uint) error); ok {
		r0 = rf(name, userIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsID provides a mock function with given fields: chatID
func (_m *ChatRepository) ExistsID(chatID uint) (bool, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for ExistsID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsSetUserIDs provides a mock function with given fields: userIDs
func (_m *ChatRepository) ExistsSetUserIDs(userIDs []uint) (bool, error) {
	ret := _m.Called(userIDs)

	if len(ret) == 0 {
		panic("no return value specified for ExistsSetUserIDs")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint) (bool, error)); ok {
		return rf(userIDs)
	}
	if rf, ok := ret.Get(0).(func([]uint) bool); ok {
		r0 = rf(userIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with no fields
func (_m *ChatRepository) GetAll() ([]*repository.Chat, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*repository.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*repository.Chat, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*repository.Chat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatIDsByUserID provides a mock function with given fields: userID
func (_m *ChatRepository) GetChatIDsByUserID(userID uint) ([]uint, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatIDsByUserID")
	}

	var r0 []uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]uint, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []uint); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: chatID
func (_m *ChatRepository) GetOne(chatID uint) (*repository.Chat, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *repository.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*repository.Chat, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(uint) *repository.Chat); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name, userIDs
func (_m *ChatRepository) Update(id uint, name *string, userIDs []uint) error {
	ret := _m.Called(id, name, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *string, []uint) error); ok {
		r0 = rf(id, name, userIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
