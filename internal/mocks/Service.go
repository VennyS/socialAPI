// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	auth "socialAPI/internal/api/auth"
	chat "socialAPI/internal/api/chat"

	friendship "socialAPI/internal/api/friendship"

	mock "github.com/stretchr/testify/mock"

	shared "socialAPI/internal/shared"

	user "socialAPI/internal/api/user"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Auth provides a mock function with no fields
func (_m *Service) Auth() auth.AuthService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 auth.AuthService
	if rf, ok := ret.Get(0).(func() auth.AuthService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.AuthService)
		}
	}

	return r0
}

// Chat provides a mock function with no fields
func (_m *Service) Chat() chat.ChatService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 chat.ChatService
	if rf, ok := ret.Get(0).(func() chat.ChatService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chat.ChatService)
		}
	}

	return r0
}

// Friendship provides a mock function with no fields
func (_m *Service) Friendship() friendship.FriendshipService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Friendship")
	}

	var r0 friendship.FriendshipService
	if rf, ok := ret.Get(0).(func() friendship.FriendshipService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(friendship.FriendshipService)
		}
	}

	return r0
}

// Token provides a mock function with no fields
func (_m *Service) Token() shared.TokenService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 shared.TokenService
	if rf, ok := ret.Get(0).(func() shared.TokenService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.TokenService)
		}
	}

	return r0
}

// User provides a mock function with no fields
func (_m *Service) User() user.UserService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 user.UserService
	if rf, ok := ret.Get(0).(func() user.UserService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserService)
		}
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
