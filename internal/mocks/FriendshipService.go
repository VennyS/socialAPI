// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	friendship "socialAPI/internal/api/friendship"

	mock "github.com/stretchr/testify/mock"

	repository "socialAPI/internal/storage/repository"

	shared "socialAPI/internal/shared"
)

// FriendshipService is an autogenerated mock type for the FriendshipService type
type FriendshipService struct {
	mock.Mock
}

// GetAllFriends provides a mock function with given fields: senderID, statusParam
func (_m *FriendshipService) GetAllFriends(senderID uint, statusParam string) ([]*repository.FriendWithID, *shared.HttpError) {
	ret := _m.Called(senderID, statusParam)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFriends")
	}

	var r0 []*repository.FriendWithID
	var r1 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint, string) ([]*repository.FriendWithID, *shared.HttpError)); ok {
		return rf(senderID, statusParam)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []*repository.FriendWithID); ok {
		r0 = rf(senderID, statusParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.FriendWithID)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) *shared.HttpError); ok {
		r1 = rf(senderID, statusParam)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shared.HttpError)
		}
	}

	return r0, r1
}

// PatchFriendship provides a mock function with given fields: friendshipID, request
func (_m *FriendshipService) PatchFriendship(friendshipID uint, request friendship.ChangeStatusRequest) *shared.HttpError {
	ret := _m.Called(friendshipID, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchFriendship")
	}

	var r0 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint, friendship.ChangeStatusRequest) *shared.HttpError); ok {
		r0 = rf(friendshipID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HttpError)
		}
	}

	return r0
}

// SendFriendRequest provides a mock function with given fields: senderID, receiverID
func (_m *FriendshipService) SendFriendRequest(senderID uint, receiverID uint) *shared.HttpError {
	ret := _m.Called(senderID, receiverID)

	if len(ret) == 0 {
		panic("no return value specified for SendFriendRequest")
	}

	var r0 *shared.HttpError
	if rf, ok := ret.Get(0).(func(uint, uint) *shared.HttpError); ok {
		r0 = rf(senderID, receiverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HttpError)
		}
	}

	return r0
}

// NewFriendshipService creates a new instance of FriendshipService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendshipService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendshipService {
	mock := &FriendshipService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
