// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	websocket "github.com/gorilla/websocket"
	mock "github.com/stretchr/testify/mock"
)

// Upgrader is an autogenerated mock type for the Upgrader type
type Upgrader struct {
	mock.Mock
}

// Upgrade provides a mock function with given fields: w, r, responseHeader
func (_m *Upgrader) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*websocket.Conn, error) {
	ret := _m.Called(w, r, responseHeader)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header) (*websocket.Conn, error)); ok {
		return rf(w, r, responseHeader)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header) *websocket.Conn); ok {
		r0 = rf(w, r, responseHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, http.Header) error); ok {
		r1 = rf(w, r, responseHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUpgrader creates a new instance of Upgrader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpgrader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Upgrader {
	mock := &Upgrader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
