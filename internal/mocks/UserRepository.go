// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user *repository.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailExists provides a mock function with given fields: email
func (_m *UserRepository) EmailExists(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (*repository.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: excludeID
func (_m *UserRepository) GetAll(excludeID *uint) ([]repository.User, error) {
	ret := _m.Called(excludeID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*uint) ([]repository.User, error)); ok {
		return rf(excludeID)
	}
	if rf, ok := ret.Get(0).(func(*uint) []repository.User); ok {
		r0 = rf(excludeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*uint) error); ok {
		r1 = rf(excludeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IDsExists provides a mock function with given fields: IDs
func (_m *UserRepository) IDsExists(IDs []uint) (bool, error) {
	ret := _m.Called(IDs)

	if len(ret) == 0 {
		panic("no return value specified for IDsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint) (bool, error)); ok {
		return rf(IDs)
	}
	if rf, ok := ret.Get(0).(func([]uint) bool); ok {
		r0 = rf(IDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
