// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"
)

// FriendshipRepository is an autogenerated mock type for the FriendshipRepository type
type FriendshipRepository struct {
	mock.Mock
}

// Exists provides a mock function with given fields: senderID, receiverID
func (_m *FriendshipRepository) Exists(senderID uint, receiverID uint) (bool, error) {
	ret := _m.Called(senderID, receiverID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(senderID, receiverID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(senderID, receiverID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(senderID, receiverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFriends provides a mock function with given fields: userID, status
func (_m *FriendshipRepository) GetAllFriends(userID uint, status *repository.FriendshipStatus) ([]*repository.FriendWithID, error) {
	ret := _m.Called(userID, status)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFriends")
	}

	var r0 []*repository.FriendWithID
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *repository.FriendshipStatus) ([]*repository.FriendWithID, error)); ok {
		return rf(userID, status)
	}
	if rf, ok := ret.Get(0).(func(uint, *repository.FriendshipStatus) []*repository.FriendWithID); ok {
		r0 = rf(userID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.FriendWithID)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *repository.FriendshipStatus) error); ok {
		r1 = rf(userID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRequest provides a mock function with given fields: friendship
func (_m *FriendshipRepository) SendRequest(friendship *repository.Friendship) error {
	ret := _m.Called(friendship)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.Friendship) error); ok {
		r0 = rf(friendship)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: friendshipID, status
func (_m *FriendshipRepository) SetStatus(friendshipID uint, status repository.FriendshipStatus) error {
	ret := _m.Called(friendshipID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, repository.FriendshipStatus) error); ok {
		r0 = rf(friendshipID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFriendshipRepository creates a new instance of FriendshipRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendshipRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendshipRepository {
	mock := &FriendshipRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
