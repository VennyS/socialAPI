// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RefreshTokenService is an autogenerated mock type for the RefreshTokenService type
type RefreshTokenService struct {
	mock.Mock
}

// FindByUserID provides a mock function with given fields: userID
func (_m *RefreshTokenService) FindByUserID(userID uint) (*repository.RefreshToken, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *repository.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*repository.RefreshToken, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *repository.RefreshToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDIfValid provides a mock function with given fields: token
func (_m *RefreshTokenService) GetUserIDIfValid(token string) (uint, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDIfValid")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeRefreshToken provides a mock function with given fields: token
func (_m *RefreshTokenService) RevokeRefreshToken(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRefreshToken provides a mock function with given fields: userID, token, expiresAt
func (_m *RefreshTokenService) SetRefreshToken(userID uint, token string, expiresAt time.Time) error {
	ret := _m.Called(userID, token, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for SetRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, time.Time) error); ok {
		r0 = rf(userID, token, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRefreshTokenService creates a new instance of RefreshTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenService {
	mock := &RefreshTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
