// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"

	shared "socialAPI/internal/shared"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetAllUsers provides a mock function with given fields: excludeID
func (_m *UserService) GetAllUsers(excludeID *uint) ([]repository.User, *shared.HttpError) {
	ret := _m.Called(excludeID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []repository.User
	var r1 *shared.HttpError
	if rf, ok := ret.Get(0).(func(*uint) ([]repository.User, *shared.HttpError)); ok {
		return rf(excludeID)
	}
	if rf, ok := ret.Get(0).(func(*uint) []repository.User); ok {
		r0 = rf(excludeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*uint) *shared.HttpError); ok {
		r1 = rf(excludeID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shared.HttpError)
		}
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
