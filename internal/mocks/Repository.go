// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	repository "socialAPI/internal/storage/repository"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Chats provides a mock function with no fields
func (_m *Repository) Chats() repository.ChatRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chats")
	}

	var r0 repository.ChatRepository
	if rf, ok := ret.Get(0).(func() repository.ChatRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ChatRepository)
		}
	}

	return r0
}

// Friendship provides a mock function with no fields
func (_m *Repository) Friendship() repository.FriendshipRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Friendship")
	}

	var r0 repository.FriendshipRepository
	if rf, ok := ret.Get(0).(func() repository.FriendshipRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.FriendshipRepository)
		}
	}

	return r0
}

// Messages provides a mock function with no fields
func (_m *Repository) Messages() repository.MessageRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 repository.MessageRepository
	if rf, ok := ret.Get(0).(func() repository.MessageRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.MessageRepository)
		}
	}

	return r0
}

// RefreshTokens provides a mock function with no fields
func (_m *Repository) RefreshTokens() repository.RefreshTokenService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 repository.RefreshTokenService
	if rf, ok := ret.Get(0).(func() repository.RefreshTokenService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.RefreshTokenService)
		}
	}

	return r0
}

// Users provides a mock function with no fields
func (_m *Repository) Users() repository.UserRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 repository.UserRepository
	if rf, ok := ret.Get(0).(func() repository.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
