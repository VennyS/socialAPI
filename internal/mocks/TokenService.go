// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	shared "socialAPI/internal/shared"

	mock "github.com/stretchr/testify/mock"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: userID
func (_m *TokenService) GenerateAccessToken(userID uint) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRefreshToken provides a mock function with no fields
func (_m *TokenService) GenerateRefreshToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTokenPair provides a mock function with given fields: userID
func (_m *TokenService) GenerateTokenPair(userID uint) (*shared.TokenPair, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenPair")
	}

	var r0 *shared.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*shared.TokenPair, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *shared.TokenPair); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *TokenService) ValidateToken(tokenString string) (*shared.Claims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *shared.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*shared.Claims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *shared.Claims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
